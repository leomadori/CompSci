import streamlit as st
import spotipy
from spotipy.oauth2 import SpotifyOAuth
from collections import Counter

# Spotify API credentials
SPOTIPY_CLIENT_ID = '53074fbca7704aef8ff5e43f4371bca2'
SPOTIPY_CLIENT_SECRET = '30a69a1e644640168c85054e1c53b0c3'
SPOTIPY_REDIRECT_URI = 'http://localhost:8505'

scope = "user-top-read playlist-modify-public playlist-modify-private user-read-recently-played user-top-read"
cache_path=".spotifycache"

# Setting up Spotify authentication
sp_oauth = SpotifyOAuth(client_id=SPOTIPY_CLIENT_ID, client_secret=SPOTIPY_CLIENT_SECRET, redirect_uri=SPOTIPY_REDIRECT_URI, scope=scope)

@st.cache_data
def authenticate_spotify():
    token_info = sp_oauth.get_access_token(as_dict=False)
    if token_info:
        return spotipy.Spotify(auth=token_info)
    return None

def get_user_top_items(sp, item_type="tracks", limit=10, time_range="medium_term"):
    """Get the user's top items (tracks or artists) for a specified time range."""
    if item_type == "tracks":
        return sp.current_user_top_tracks(limit=limit, time_range=time_range)['items']
    elif item_type == "artists":
        return sp.current_user_top_artists(limit=limit, time_range=time_range)['items']
    return []

def get_favorite_song(sp):
    """Retrieve user's favorite song from top tracks."""
    top_tracks = get_user_top_items(sp, item_type="tracks", limit=1)
    if top_tracks:
        song_name = top_tracks[0]['name']
        artist_name = top_tracks[0]['artists'][0]['name']
        album_image = top_tracks[0]['album']['images'][0]['url']
        song_id = top_tracks[0]['id']
        return song_name, artist_name, album_image, song_id
    return None, None, None, None

def get_favorite_artist(sp):
    """Retrieve user's favorite artist from top artists."""
    top_artists = get_user_top_items(sp, item_type="artists", limit=1)
    if top_artists:
        artist_name = top_artists[0]['name']
        artist_image = top_artists[0]['images'][0]['url']
        artist_id = top_artists[0]['id']
        return artist_name, artist_image, artist_id
    return None, None, None

def get_favorite_genre(sp):
    """Calculate user's favorite genre from top artists."""
    top_artists = get_user_top_items(sp, item_type="artists", limit=10)
    genres = [genre for artist in top_artists for genre in artist['genres']]
    if genres:
        most_common_genre = Counter(genres).most_common(1)[0][0]
        genre_image = top_artists[0]['images'][0]['url'] if top_artists[0]['images'] else None
        return most_common_genre, genre_image
    return None, None

def get_top_5_artists(sp):
    """Retrieve user's top 5 artists with their total listening time in hours and minutes."""
    top_artists = get_user_top_items(sp, item_type="artists", limit=5)
    artist_time_data = []
    top_tracks = get_user_top_items(sp, item_type="tracks", limit=50)

    for artist in top_artists:
        artist_name = artist['name']
        artist_img = artist['images'][0]['url']
        total_ms = sum(track['duration_ms'] for track in top_tracks if track['artists'][0]['name'] == artist_name)
        total_hours = total_ms // 3600000
        total_minutes = (total_ms % 3600000) // 60000
        artist_time_data.append((artist_name, artist_img, f"{total_hours}h {total_minutes}m"))

    return artist_time_data

def get_top_5_songs(sp):
    """Retrieve user's top 5 songs with estimated play counts."""
    top_tracks = get_user_top_items(sp, item_type="tracks", limit=5)
    song_data = []

    for track in top_tracks:
        track_name = track['name']
        track_artist = track['artists'][0]['name']
        track_img = track['album']['images'][0]['url']
        estimated_play_count = max(1, track['popularity'] // 10)
        song_data.append((track_name, track_artist, track_img, estimated_play_count))

    return song_data

def get_artist_top_tracks(sp, artist_id):
    """Retrieve popular tracks by the specified artist."""
    results = sp.artist_top_tracks(artist_id, country="US")
    return [(track['name'], track['album']['images'][0]['url']) for track in results['tracks'][:5]]

def get_genre_popular_tracks(sp, genre_name):
    """Retrieve popular tracks in the specified genre."""
    results = sp.search(q=f"genre:{genre_name}", type="track", limit=5)
    return [(track['name'], track['album']['images'][0]['url']) for track in results['tracks']['items']]

def get_similar_songs(sp, song_id):
    """Retrieve similar songs to the specified song."""
    results = sp.recommendations(seed_tracks=[song_id], limit=3)
    return [(track['name'], track['artists'][0]['name'], track['album']['images'][0]['url']) for track in results['tracks']]

def main():
    st.title("Spotify Favorites Tracker")
    
    # Initialize session states if they haven't been initialized
    if "show_similar_songs" not in st.session_state:
        st.session_state["show_similar_songs"] = False
    if "show_artist_songs" not in st.session_state:
        st.session_state["show_artist_songs"] = False
    if "show_genre_songs" not in st.session_state:
        st.session_state["show_genre_songs"] = False
    if "similar_songs" not in st.session_state:
        st.session_state["similar_songs"] = []

    # User authentication
    sp = authenticate_spotify()
    
    if sp:
        st.success("Authentication successful!")
        
        # Retrieve favorite song, artist, and genre data
        song, song_artist, song_image, song_id = get_favorite_song(sp)
        favorite_artist, artist_image, artist_id = get_favorite_artist(sp)
        favorite_genre, genre_image = get_favorite_genre(sp)

        # Retrieve top 5 artists with listening time and top 5 songs with estimated play counts
        top_5_artists = get_top_5_artists(sp)
        top_5_songs = get_top_5_songs(sp)

        # Display favorite song, artist, and genre with clickable actions
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.subheader("Favorite Song")
            if song and song_artist:
                st.image(song_image, width=150)
                st.write(f"**{song}** by {song_artist}")
                
                # Button to find 3 similar songs
                def find_similar_songs():
                    st.session_state.show_similar_songs = True
                    st.session_state.similar_songs = get_similar_songs(sp, song_id)
                
                st.button("Find 3 Similar Songs", on_click=find_similar_songs)

                # Show similar songs if the state is active
                if st.session_state.show_similar_songs:
                    st.write("**Similar Songs**")
                    for sim_song, sim_artist, sim_img in st.session_state.similar_songs:
                        st.image(sim_img, width=100)
                        st.write(f"{sim_song} by {sim_artist}")

                    # Button to refresh similar songs
                    def refresh_similar_songs():
                        st.session_state.similar_songs = get_similar_songs(sp, song_id)

                    st.button("Refresh Similar Songs", on_click=refresh_similar_songs)
                    
                    # Button to cancel similar songs
                    def cancel_similar_songs():
                        st.session_state.show_similar_songs = False

                    st.button("Cancel Similar Songs", on_click=cancel_similar_songs)
            else:
                st.write("No favorite song data available.")

        with col2:
            st.subheader("Favorite Artist")
            if favorite_artist:
                st.image(artist_image, width=150)
                st.write(f"[**{favorite_artist}**](#)", unsafe_allow_html=True)
                
                # Show Songs by Favorite Artist
                def toggle_artist_songs():
                    st.session_state.show_artist_songs = not st.session_state.show_artist_songs
                
                st.button(f"Show Songs by {favorite_artist}", on_click=toggle_artist_songs)
                
                # Display artist songs if the state is active
                if st.session_state.show_artist_songs:
                    artist_tracks = get_artist_top_tracks(sp, artist_id)
                    st.write(f"**Top Songs by {favorite_artist}**")
                    for track_name, track_img in artist_tracks:
                        st.image(track_img, width=100)
                        st.write(track_name)
                    
                    # Cancel button for artist songs
                    def cancel_artist_songs():
                        st.session_state.show_artist_songs = False
                    
                    st.button("Cancel Artist Songs", on_click=cancel_artist_songs)
            else:
                st.write("No favorite artist data available.")

        with col3:
            st.subheader("Favorite Genre")
            if favorite_genre:
                if genre_image:
                    st.image(genre_image, width=150)
                st.write(f"[**{favorite_genre.capitalize()}**](#)", unsafe_allow_html=True)
                
                # Show Popular Genre Songs
                def toggle_genre_songs():
                    st.session_state.show_genre_songs = not st.session_state.show_genre_songs
                
                st.button(f"Show Popular {favorite_genre.capitalize()} Songs", on_click=toggle_genre_songs)
                
                # Display genre songs if the state is active
                if st.session_state.show_genre_songs:
                    genre_tracks = get_genre_popular_tracks(sp, favorite_genre)
                    st.write(f"**Popular {favorite_genre.capitalize()} Songs**")
                    for track_name, track_img in genre_tracks:
                        st.image(track_img, width=100)
                        st.write(track_name)

                    # Cancel button for genre songs
                    def cancel_genre_songs():
                        st.session_state.show_genre_songs = False
                    
                    st.button("Cancel Genre Songs", on_click=cancel_genre_songs)
            else:
                st.write("No favorite genre data available.")
        
        # Display top 5 artists in a grid format with listening times
        st.subheader("Top 5 Artists (Listening Time)")
        artist_columns = st.columns(5)
        for i, (artist_name, artist_img, listening_time) in enumerate(top_5_artists):
            with artist_columns[i]:
                st.image(artist_img, width=100)
                st.caption(f"{artist_name}\n{listening_time}")

        # Display top 5 songs in a grid format with estimated play counts
        st.subheader("Top 5 Songs (Play Count)")
        song_columns = st.columns(5)
        for i, (track_name, track_artist, track_img, play_count) in enumerate(top_5_songs):
            with song_columns[i]:
                st.image(track_img, width=100)
                st.caption(f"{track_name} by {track_artist}\nPlays: {play_count}")
    
    else:
        st.error("Authentication failed. Please try again.")

if __name__ == "__main__":
    main()
